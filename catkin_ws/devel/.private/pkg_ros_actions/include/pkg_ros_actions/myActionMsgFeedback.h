// Generated by gencpp from file pkg_ros_actions/myActionMsgFeedback.msg
// DO NOT EDIT!


#ifndef PKG_ROS_ACTIONS_MESSAGE_MYACTIONMSGFEEDBACK_H
#define PKG_ROS_ACTIONS_MESSAGE_MYACTIONMSGFEEDBACK_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace pkg_ros_actions
{
template <class ContainerAllocator>
struct myActionMsgFeedback_
{
  typedef myActionMsgFeedback_<ContainerAllocator> Type;

  myActionMsgFeedback_()
    : cur_x(0)
    , cur_y(0)
    , cur_theta(0)  {
    }
  myActionMsgFeedback_(const ContainerAllocator& _alloc)
    : cur_x(0)
    , cur_y(0)
    , cur_theta(0)  {
  (void)_alloc;
    }



   typedef int8_t _cur_x_type;
  _cur_x_type cur_x;

   typedef int8_t _cur_y_type;
  _cur_y_type cur_y;

   typedef int8_t _cur_theta_type;
  _cur_theta_type cur_theta;





  typedef boost::shared_ptr< ::pkg_ros_actions::myActionMsgFeedback_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::pkg_ros_actions::myActionMsgFeedback_<ContainerAllocator> const> ConstPtr;

}; // struct myActionMsgFeedback_

typedef ::pkg_ros_actions::myActionMsgFeedback_<std::allocator<void> > myActionMsgFeedback;

typedef boost::shared_ptr< ::pkg_ros_actions::myActionMsgFeedback > myActionMsgFeedbackPtr;
typedef boost::shared_ptr< ::pkg_ros_actions::myActionMsgFeedback const> myActionMsgFeedbackConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::pkg_ros_actions::myActionMsgFeedback_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::pkg_ros_actions::myActionMsgFeedback_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::pkg_ros_actions::myActionMsgFeedback_<ContainerAllocator1> & lhs, const ::pkg_ros_actions::myActionMsgFeedback_<ContainerAllocator2> & rhs)
{
  return lhs.cur_x == rhs.cur_x &&
    lhs.cur_y == rhs.cur_y &&
    lhs.cur_theta == rhs.cur_theta;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::pkg_ros_actions::myActionMsgFeedback_<ContainerAllocator1> & lhs, const ::pkg_ros_actions::myActionMsgFeedback_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace pkg_ros_actions

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::pkg_ros_actions::myActionMsgFeedback_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::pkg_ros_actions::myActionMsgFeedback_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::pkg_ros_actions::myActionMsgFeedback_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::pkg_ros_actions::myActionMsgFeedback_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::pkg_ros_actions::myActionMsgFeedback_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::pkg_ros_actions::myActionMsgFeedback_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::pkg_ros_actions::myActionMsgFeedback_<ContainerAllocator> >
{
  static const char* value()
  {
    return "0a9172acbd2d788295bb9e44c2e2758a";
  }

  static const char* value(const ::pkg_ros_actions::myActionMsgFeedback_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x0a9172acbd2d7882ULL;
  static const uint64_t static_value2 = 0x95bb9e44c2e2758aULL;
};

template<class ContainerAllocator>
struct DataType< ::pkg_ros_actions::myActionMsgFeedback_<ContainerAllocator> >
{
  static const char* value()
  {
    return "pkg_ros_actions/myActionMsgFeedback";
  }

  static const char* value(const ::pkg_ros_actions::myActionMsgFeedback_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::pkg_ros_actions::myActionMsgFeedback_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n"
"# feedback\n"
"int8 cur_x\n"
"int8 cur_y\n"
"int8 cur_theta\n"
"\n"
;
  }

  static const char* value(const ::pkg_ros_actions::myActionMsgFeedback_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::pkg_ros_actions::myActionMsgFeedback_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.cur_x);
      stream.next(m.cur_y);
      stream.next(m.cur_theta);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct myActionMsgFeedback_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::pkg_ros_actions::myActionMsgFeedback_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::pkg_ros_actions::myActionMsgFeedback_<ContainerAllocator>& v)
  {
    s << indent << "cur_x: ";
    Printer<int8_t>::stream(s, indent + "  ", v.cur_x);
    s << indent << "cur_y: ";
    Printer<int8_t>::stream(s, indent + "  ", v.cur_y);
    s << indent << "cur_theta: ";
    Printer<int8_t>::stream(s, indent + "  ", v.cur_theta);
  }
};

} // namespace message_operations
} // namespace ros

#endif // PKG_ROS_ACTIONS_MESSAGE_MYACTIONMSGFEEDBACK_H
