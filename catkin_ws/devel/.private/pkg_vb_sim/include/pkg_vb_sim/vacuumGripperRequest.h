// Generated by gencpp from file pkg_vb_sim/vacuumGripperRequest.msg
// DO NOT EDIT!


#ifndef PKG_VB_SIM_MESSAGE_VACUUMGRIPPERREQUEST_H
#define PKG_VB_SIM_MESSAGE_VACUUMGRIPPERREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace pkg_vb_sim
{
template <class ContainerAllocator>
struct vacuumGripperRequest_
{
  typedef vacuumGripperRequest_<ContainerAllocator> Type;

  vacuumGripperRequest_()
    : activate_vacuum_gripper(false)  {
    }
  vacuumGripperRequest_(const ContainerAllocator& _alloc)
    : activate_vacuum_gripper(false)  {
  (void)_alloc;
    }



   typedef uint8_t _activate_vacuum_gripper_type;
  _activate_vacuum_gripper_type activate_vacuum_gripper;





  typedef boost::shared_ptr< ::pkg_vb_sim::vacuumGripperRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::pkg_vb_sim::vacuumGripperRequest_<ContainerAllocator> const> ConstPtr;

}; // struct vacuumGripperRequest_

typedef ::pkg_vb_sim::vacuumGripperRequest_<std::allocator<void> > vacuumGripperRequest;

typedef boost::shared_ptr< ::pkg_vb_sim::vacuumGripperRequest > vacuumGripperRequestPtr;
typedef boost::shared_ptr< ::pkg_vb_sim::vacuumGripperRequest const> vacuumGripperRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::pkg_vb_sim::vacuumGripperRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::pkg_vb_sim::vacuumGripperRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::pkg_vb_sim::vacuumGripperRequest_<ContainerAllocator1> & lhs, const ::pkg_vb_sim::vacuumGripperRequest_<ContainerAllocator2> & rhs)
{
  return lhs.activate_vacuum_gripper == rhs.activate_vacuum_gripper;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::pkg_vb_sim::vacuumGripperRequest_<ContainerAllocator1> & lhs, const ::pkg_vb_sim::vacuumGripperRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace pkg_vb_sim

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::pkg_vb_sim::vacuumGripperRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::pkg_vb_sim::vacuumGripperRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::pkg_vb_sim::vacuumGripperRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::pkg_vb_sim::vacuumGripperRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::pkg_vb_sim::vacuumGripperRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::pkg_vb_sim::vacuumGripperRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::pkg_vb_sim::vacuumGripperRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "751b0bcd7e7e984c5083f65904bb71f9";
  }

  static const char* value(const ::pkg_vb_sim::vacuumGripperRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x751b0bcd7e7e984cULL;
  static const uint64_t static_value2 = 0x5083f65904bb71f9ULL;
};

template<class ContainerAllocator>
struct DataType< ::pkg_vb_sim::vacuumGripperRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "pkg_vb_sim/vacuumGripperRequest";
  }

  static const char* value(const ::pkg_vb_sim::vacuumGripperRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::pkg_vb_sim::vacuumGripperRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bool activate_vacuum_gripper\n"
;
  }

  static const char* value(const ::pkg_vb_sim::vacuumGripperRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::pkg_vb_sim::vacuumGripperRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.activate_vacuum_gripper);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct vacuumGripperRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::pkg_vb_sim::vacuumGripperRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::pkg_vb_sim::vacuumGripperRequest_<ContainerAllocator>& v)
  {
    s << indent << "activate_vacuum_gripper: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.activate_vacuum_gripper);
  }
};

} // namespace message_operations
} // namespace ros

#endif // PKG_VB_SIM_MESSAGE_VACUUMGRIPPERREQUEST_H
